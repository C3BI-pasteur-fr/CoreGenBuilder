#!/bin/bash

#####################################################################################################################
# CoreGeneBuilder - extracts a core genome or a persistent genome from a set of bacterial genomes.                  #
# Authors: Elise Larsonneur, Marie Touchon, Damien Mornico, Alexis Criscuolo, Sylvain Brisse, Eduardo P. C. Rocha   #
# Copyright Â© 2016 IFB, CNRS, Institut Pasteur                                                                      #
#                                                                                                                   #
# Please read README file for contact information.                                                                  #
#                                                                                                                   #
# This file is part of CoreGeneBuilder.                                                                             #
#                                                                                                                   #
# CoreGeneBuilder is free software: you can redistribute it and/or modify                                           #
# it under the terms of the GNU General Public License as published by                                              #
# the Free Software Foundation, either version 3 of the License, or                                                 #
# (at your option) any later version.                                                                               #
#                                                                                                                   #
# CoreGeneBuilder is distributed in the hope that it will be useful,                                                # 
# but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    # 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     #
# GNU General Public License for more details.                                                                      #
#                                                                                                                   #
# You should have received a copy of the GNU General Public License                                                 #
# along with CoreGeneBuilder.  If not, see <http://www.gnu.org/licenses/>.                                          #
#                                                                                                                   #
# coregenebuilder: main script of software CoreGeneBuilder.                                                         #
# Authors: Elise Larsonneur, Damien Mornico                                                                         #
#####################################################################################################################


set -o pipefail


########################################################################################
# GLOBAL VARIABLES & SOURCE LIBRARY AND CONFIGURATION FILES                            #
########################################################################################

readonly VERSION=1.0
echo "CoreGeneBuilder version ${VERSION}";


CGB_CONFIG='../config/'
source "${CGB_CONFIG}/config_env.txt"
source "${CGB_BIN}utils.sh"


## parameters initialization
DIRECTORY='N.O.D.I.R'      ## -d
NAME='N.O.N.A.M.E'         ## -n
IDPRCT=80                  ## -i
PROTLENGTHRATIO=1.3        ## -l
SYNTGENESUM=4              ## -S
SYNTRADIUSSIZE=5           ## -R
REFGENOME='N.O.R.E.F'      ## -g
SELECTEDGENOMENB='-1 '     ## -s
CONTIGLENGTH=500           ## -f
N50THRESHOLD=0             ## -y
CUTN=10                    ## -N
NBCTGTHRESHOLD='-1'        ## -c
CGGENOMEPRCT=95            ## -p
THREADS=1                  ## -t
REMOVEFILES=0              ## -r
REFANNOTATION='N.O.R.E.F'  ## -a
REFIDPATTERN='N.O.P.A.T.T.E.R.N'   ## -e
STEPS='DAC'                  ## -z



########################################################################################
# FUNCTIONS                                                                            #
########################################################################################

# display_usage 
# This function displays the usage of this program.
# No parameters
function display_usage { 
  echo '';
  echo 'USAGE :';
  echo "     $0 [options] -d <input_directory> -n <name_of_4_chars>";
  echo '   -d <inDirectory>  directory where are stored input and output files, it must contain at least a directory called 'assemblies' where are genomic sequence fasta files';
  echo '   -n <string>  four letter name (ex : esco (es:escherichia; co:coli))';
  echo "  where 'options' are :";
  echo '   ### PRE-PROCESSING OF GENOMIC SEQUENCES ###';
  echo '   -f <int>     filtering out genomic sequences below this length value (bp) (default : 500); if 0, no filter';
  echo "   -N <int>     cut sequences with mers of 'N' of size '-N' (scaffolds) into contigs (default : 10); if -1, no filter";
  echo '   -y <int>     filtering out genomes having N50 below this N50 value (bp) (default : 0); if 0, no filter';
  echo '   -c <int>     filtering out genomes having number of sequences above this value (default : -1); if -1, no filter';
  echo '   ### DIVERSITY ###';
  echo '   -s <int>     number of genomes to select for core genome construction (default : -1); if -1, no selection (all genomes are kept)';
  echo '   ### CORE-GENOME ###';
  echo '   -i <int>     similarity percent (default : 80) -- core genome construction step';
  echo '   -l <float>   protein length ratio (default : 1.2) -- core genome construction step';
  echo '   -S <int>     synteny - synteny threshold : minimal number of syntenic genes found in the neighborhood of a given homologous gene, ';
  echo '                      the boundaries of explored neighborood are defined by window size (option -R); (default : 4); if 0, no synteny criteria is applied';
  echo '   -R <int>     synteny - radius size around each analyzed homologous gene (a number of genes) (default : 5) -- window_size=(radius_size * 2 + 1)';
  echo "   -p <int>     core genes are present at least in p% of the genomes (default : 95) -- if '-p 100' is supplied, core gene set is output; else if 'p' is lower than 100, persistent gene set is output";
  echo '   ### GENERAL OPTIONS ###';
  echo "   -z <STEPS>   steps to run ; ex : '-z DAC' or '-z DA' or '-z D' ; D : diversity - A : annotation - C : coregenome (default: DAC)";
  echo '   -g <inFile>  reference genome fasta file -- annotation and core genome construction steps';
  echo '   -a <inFile>  reference genome genbank file -- annotation step';
  echo "   -e <inFile>  prefix string of contig ids found in the reference genome fasta and genbank files (eg id in fields LOCUS and ACCESSION of genbank file) (ex : 'NC_'; 'NZ_' ; 'AKAC' ; etc)";
  echo '   -t <int>     number of threads used during diversity and annotation steps (default : 1)';
  echo '   -r <int>     if 1, remove files from precedent run of this pipeline inside directory <input_directory> (default : 0)';
  echo '   -v           print version number';
  echo '   -h           print help';
  echo '';
  echo 'DESCRIPTION :';
  echo "     CoreGeneBuilder version ${VERSION}";
  echo '     CoreGeneBuilder extracts a core genome or a persistent genome from a set of bacterial genomes.';
  echo '     The core genome is the set of homologous genes (protein families) shared by all genomes.';
  echo '     The persistent genome is the set of homologous genes (protein families) shared by less than 100% of the genomes.';
  echo '';
  echo 'CITATION :';
  echo '     Please cite CoreGeneBuilder using the DOI of this release (see README.md file).';
  echo '';
  echo 'EXAMPLES :';
  echo '     #provided reference genome and related genbank annotation, the functional annotation of reference genome will be transferred to the other genomes:';
  echo "     $0 -d klpn5refannot -n klpn -g MGH78578_NC.fasta -a MGH78578_NC.gb -e NC_ -p 95 -t 1 -s 3";
  echo '';
  echo '     #provided reference genome but not provided related genbank annotation, the reference genome will be de novo annotated:';
  echo "     $0 -d klpn5refannot -n klpn -g MGH78578_NC.fasta -p 95 -t 1 -s 3";
  echo ''; 
  echo '     #not provided reference genome and related genbank annotation, the reference genome will be the first on the genome list sorted alphabetically:';
  echo "     $0 -d klpn5refannot -n klpn -p 100 -t 1 -s 3";  
} 


# exec_step
# This function execute one step among the three available steps.
# Parameters
# - Name of the step to run. A string.
# - Arguments of the step to run. An array.
# If this step is not successful, the program exits.
function exec_step {

  local step arguments
  local directory_ name_ idprct_ protlengthratio_ syntgenesum_ syntradiussize_ refgenome_ refannotation_ refidpattern_ selectedgenomenb_ contiglength_ n50threshold_ nbctgthreshold_ cutn_ cggenomeprct_ threads_
  if [[ -z "$1" ]]; then echo '[ERROR] the function exec_step expects a step_name to run' >&2; exit 1; fi
  if [[ -z "$2" ]]; then echo '[ERROR] the function exec_step expects an array_name to run' >&2; exit 1; fi
  if [[ $# -eq 0 ]] || [[ $# -gt 2 ]]; then echo "[ERROR] the function exec_step expects 2 parameters, $# parameters given" >&2; exit 1; fi
  step=$1
  tmp=$(declare -p "$2")			
  eval "declare -A argstab="${tmp#*=}    ## associative array
  for k in "${!argstab[@]}"; do
    echo " $k: ${argstab[$k]}"
  done

  directory_="${argstab['DIRECTORY']}"
  #echo "PASS ARRAY TO FUNCTION : DIRECTORY => ${directory_}";
  name_="${argstab['NAME']}"
  idprct_="${argstab['IDPRCT']}"
  protlengthratio_="${argstab['PROTLENGTHRATIO']}"
  syntgenesum_="${argstab['SYNTGENESUM']}"
  syntradiussize_="${argstab['SYNTRADIUSSIZE']}"
  refgenome_="${argstab['REFGENOME']}"
  refannotation_="${argstab['REFANNOTATION']}"
  refidpattern_="${argstab['REFIDPATTERN']}"
  selectedgenomenb_="${argstab['SELECTEDGENOMENB']}"
  contiglength_="${argstab['CONTIGLENGTH']}"
  n50threshold_="${argstab['N50THRESHOLD']}"
  nbctgthreshold_="${argstab['NBCTGTHRESHOLD']}"
  cutn_="${argstab['CUTN']}"
  cggenomeprct_="${argstab['CGGENOMEPRCT']}"
  threads_="${argstab['THREADS']}"
  removefiles_="${argstab['REMOVEFILES']}"
  cgb_config_="${argstab['CGB_CONFIG']}"

  ##
  arguments=""
  case $step in
    DIVERSITY) 
      echo -e '\nDIVERSITY step starts...'; 
      arguments="-C ${cgb_config_} -d ${directory_} -n ${name_} -f ${contiglength_} -y ${n50threshold_} -c ${nbctgthreshold_} -N ${cutn_} -s ${selectedgenomenb_} -g ${refgenome_} -a ${refannotation_} -e ${refidpattern_} -t ${threads_}"; 
      echo "diversity: ${arguments}" 
      ;;
    ANNOTATION) 
      echo -e '\nANNOTATION step starts...'; 
      arguments="-C ${cgb_config_} -d ${directory_} -n ${name_} -g ${refgenome_} -a ${refannotation_} -e ${refidpattern_} -t ${threads_}"; 
      echo "annotation: ${arguments}" 
      ;;
    COREGENOME) 
      echo -e '\nCOREGENOME step starts...'; 
      arguments="-C ${cgb_config_} -n ${name_} -d ${directory_} -s ${selectedgenomenb_} -i ${idprct_} -l ${protlengthratio_} -g ${refgenome_} -S ${syntgenesum_} -R ${syntradiussize_} -p ${cggenomeprct_}"; 
      echo "core genome: ${arguments}" 
      ;;
  esac



  echo "START ${step}" >> "${DATA}/${directory_}/progress_file.txt";

  #=========== INIT_STEP ==================

  #Pipeline progress file 
  echo "${step}_INIT_STEP" >> "${DATA}/${directory_}/progress_file.txt";
  echo "${step}_INIT_STEP"


  ${CGB_BIN}init_${step}.sh $arguments; 
  if [[ $? -eq 0  ]]; then
    echo "${step}_INIT_STEP_OK" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step} INITIATION OK";	
  else
    echo "${step}_INIT_STEP_FAIL" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step} INITIATION FAIL";
    exit 1
  fi

  #=========== RUN_STEP ==================

  #Pipeline progress file 
  echo "${step}_RUN_STEP" >> "${DATA}/${directory_}/progress_file.txt";
  echo "${step}_RUN_STEP";


  ${CGB_BIN}run_${step}.sh $arguments; 
  if [[ $? -eq 0  ]]; then
    echo "${step}_RUN_STEP_OK" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step} RUN OK";
  else
    echo "${step}_RUN_STEP_FAIL" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step} RUN FAIL";
    exit 1
  fi

  #=========== POSTPROCESS_STEP ==================

  #Pipeline progress file 
  echo "${step}_POSTPROCESS_STEP" >> "${DATA}/${directory_}/progress_file.txt";
  echo "${step}_POSTPROCESS_STEP";

  ${CGB_BIN}post_${step}.sh $arguments; 
  if [[ $? -eq 0  ]]; then
    echo "${step}_POSTPROCESS_STEP_OK" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step}_POSTPROCESS_STEP OK";
  else
    echo "${step}_POSTPROCESS_STEP_FAIL" >> "${DATA}/${directory_}/progress_file.txt";
    echo "${step}_POSTPROCESS_STEP FAIL";
    exit $1
  fi
}


########################################################################################
# MAIN FUNCTION                                                                        #
########################################################################################
# main 
# CoreGeneBuilder extracts a core genome or a persistent genome from a set of bacterial genomes.
# Parameters : See 'getopts' part.
function main {
 
  # check whether user had supplied -h or --help . If yes display usage 
  if [[ "$1" = "-?" ]] || [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then 
    display_usage
    exit 0;
  fi

  #  print version of CoreGeneBuilder
  if [[ "$1" = "-v" ]] || [[ "$1" = "--version" ]]; then 
    echo "CoreGeneBuilder version ${VERSION}";
    exit 0;
  fi

  # if less than two arguments supplied, display usage 
  if [[  $# -le 1 ]]; then 
    display_usage
    exit 1;
  fi 



  ## catch option values
  while getopts :d:n:i:l:S:R:g:a:e:s:f:y:N:c:p:t:r:z: option
  do
    if [[ -z "${OPTARG}" ]]; then echo "[ERROR] empty argument for option -${option}"; exit 1; fi
    case "${option}" in
      d) 
        DIRECTORY="${OPTARG}";
        if [[ ! -d "${DATA}/${DIRECTORY}" ]]; then echo "[ERROR] input directory '${DATA}/${DIRECTORY}' does not exist (option -d)." ; exit 1 ; fi  
        ;; # -d <inDirectory>
      n) 
        NAME="${OPTARG}";
        size=${#NAME}; 
        if [[ $size -ne 4 ]]; then echo '[ERROR] name of 4 letters is required (option -n).' ; exit 1 ; fi  
        ;; # -n <name (4 letters)>
      i) 
        IDPRCT="${OPTARG}";
        if ! [[ "${IDPRCT}" =~ ^[0-9]+$ ]] || [[ $IDPRCT -lt 0 ]] || [[ $IDPRCT -gt 100 ]]; then echo '[ERROR] the similarity percent threshold must range from 0 to 100 (option -q).' ; exit 1 ; fi  
        ;; # -i <similarity percent threshold>
      l) 
        PROTLENGTHRATIO="${OPTARG}";    
        num1="$(echo "$PROTLENGTHRATIO <= 0.0" |bc -l)"; 
        num2="$(echo "$PROTLENGTHRATIO >= 10.0" |bc -l)"; 
        if [[ $num1 -eq 1 ]] || [[ $num2 -eq 1 ]] ; then echo '[ERROR] the protein length ratio threshold must be greater than 0 (option -l).' ; exit 1 ; fi  
        ;; # -l < protein length ratio threshold>
      S) 
        SYNTGENESUM="${OPTARG}";
        if ! [[ "${SYNTGENESUM}" =~ ^[0-9]+$ ]] || [[ $SYNTGENESUM -lt 0 ]]; then echo '[ERROR] the syntenic gene number threshold must be greater or equal to 0 (option -S).' ; exit 1 ; fi  
        ;; # -S <syntenic gene number threshold>
      R) 
        SYNTRADIUSSIZE="${OPTARG}";     
        if ! [[ "${SYNTRADIUSSIZE}" =~ ^[0-9]+$ ]] || [[ $SYNTRADIUSSIZE -lt 1 ]]; then echo '[ERROR] the syntenic radius size threshold must be greater than 0 (option -R).' ; exit 1 ; fi  
        ;; # -R <syntenic radius size threshold>
      g) 
        REFGENOME="${OPTARG}";   
        ;;     # -g <reference genome FASTA infile>
      a) 
        REFANNOTATION="${OPTARG}";      
        ;; # -a <annotation linked to reference genome GENBANK infile>
      e) 
        REFIDPATTERN="${OPTARG}";   
        ;;  # -e <prefix of reference contig id>
      s) 
        SELECTEDGENOMENB="${OPTARG}";   
        if ! [[ "${SELECTEDGENOMENB}" =~ ^[0-9]+$ ]] && [[ "${SELECTEDGENOMENB}" != '-1' ]]; then echo '[ERROR] Bad value for option -s' ; exit 1 ; fi;  
        if [[ "${SELECTEDGENOMENB}" != '-1' ]] && [[ $SELECTEDGENOMENB -lt 2 ]]; then
          echo '[ERROR] the number of genomes to select for core genome construction must be greater than 1 (option -s).' ; exit 1 ; 
        fi  
        ;; # -s <number of selected genomes threshold>
      f) 
        CONTIGLENGTH="${OPTARG}";       
        if ! [[ "${CONTIGLENGTH}" =~ ^[0-9]+$ ]] || [[ $CONTIGLENGTH -lt 1 ]]; then echo '[ERROR] the sequence length threshold must be greater than 0 (option -f).' ; exit 1 ; fi  
        ;; # -f <contig length threshold> 
      y) 
        N50THRESHOLD="${OPTARG}";       
        if ! [[ "${N50THRESHOLD}" =~ ^[0-9]+$ ]]; then echo '[ERROR] Bad value for option -y'; exit 1; fi 
        ;; # -y <N50 length threshold> 
      N) 
        CUTN="${OPTARG}";
        if ! [[ "${CUTN}" =~ ^[0-9]+$ ]] && [[ "${CUTN}" != "-1" ]]; then echo '[ERROR] Bad value for option -N'; exit 1; fi;  
        if [[ $CUTN -eq 0 ]]; then echo '[ERROR] Bad value for option -N'; exit 1; fi 
        ;;
      c) 
        NBCTGTHRESHOLD="${OPTARG}";
        if ! [[ "${NBCTGTHRESHOLD}" =~ ^[0-9]+$ ]] && [[ "${NBCTGTHRESHOLD}" != "-1" ]]; then echo '[ERROR] Bad value for option -c'; exit 1; fi
        if [[ "${NBCTGTHRESHOLD}" != "-1" ]] && [[ $NBCTGTHRESHOLD -le 0 ]]; then echo '[ERROR] the sequence number threshold must be greater than 0 (option -c).' ; exit 1 ; fi 
        ;; # -c <nb_contig threshold> 
      p) 
        CGGENOMEPRCT="${OPTARG}";
        if ! [[ "${CGGENOMEPRCT}" =~ ^[0-9]+$ ]] || [[ $CGGENOMEPRCT -lt 0 ]] || [[ $CGGENOMEPRCT -gt 100 ]]; then 
          echo "[ERROR] the core gene set will be present in '-p <int>' genomes over 100 genomes'. The percentage threshold 'p' must range from 0 to 100 (option -p)." ; exit 1 ; 
        fi  
        ;; # -p <homologs present in <p>% of the proteomes>
      t) 
        THREADS="${OPTARG}";
        nproc="$(nproc)"; 
        if ! [[ "${THREADS}" =~ ^[0-9]+$ ]] || [[ $THREADS -lt 1 ]]; then echo '[ERROR] the number of threads must be greater than 0 (option -t).' ; exit 1 ; fi; 
        if [[ $THREADS -gt $nproc ]]; then echo "[ERROR] too much threads requested, use ${nproc} thread(s) instead"; exit 1; fi  
        ;; # -t <number of threads> 
      r) 
        REMOVEFILES="${OPTARG}";
        if [[ $REMOVEFILES -ne 1 ]] && [[ $REMOVEFILES -ne 0 ]]; then echo '[ERROR] Bad value for option -r'; exit 1; fi 
        ;;
      z) 
        STEPS="${OPTARG}";
        if [[ "${STEPS}" != 'DAC' ]] && [[ "${STEPS}" != 'D' ]] && [[ "${STEPS}" != 'A' ]] && [[ "${STEPS}" != 'C' ]] && [[ "${STEPS}" != 'DA' ]] && [[ "${STEPS}" != 'AC' ]]; then 
          echo "[ERROR] invalid step order. Allowed steps : ''D', 'A', 'C', 'DA', 'AC', 'DAC'."; exit 1 ; 
        fi 
        ;;
      :) 
        echo "[ERROR] option ${OPTARG} : missing argument" ; exit 1  
        ;;
      \?) 
        echo "[ERROR] ${OPTARG} : option invalide" ; exit 1  
        ;;
    esac
  done
 
  readonly DIRECTORY NAME IDPRCT PROTLENGTHRATIO SYNTGENESUM SYNTRADIUSSIZE REFGENOME SELECTEDGENOMENB
  readonly CONTIGLENGTH N50THRESHOLD CUTN NBCTGTHRESHOLD CGGENOMEPRCT THREADS REMOVEFILES REFANNOTATION
  readonly REFIDPATTERN STEPS



  ### checking input directory
  if [[ "${DIRECTORY}" = 'N.O.D.I.R' ]]; then echo '[ERROR] no input directory supplied (mandatory option -d)' ; exit 1 ; fi
  if [[ ! -e "${DATA}/${DIRECTORY}" ]]; then echo "[ERROR] directory ${DATA}/${DIRECTORY} does not exist, please create it." ; exit 1 ; fi
  
  ### checking name 
  if [[ "${NAME}" = 'N.O.N.A.M.E' ]]; then echo '[ERROR] no name supplied (mandatory option -n)' ; exit 1 ; fi

  ### checking if directory containing genomes (assemblies) exists and is not empty
  if [[ ! -e "${DATA}/${DIRECTORY}/assemblies" ]]; then echo "[ERROR] directory ${DATA}/${DIRECTORY}/assemblies does not exist, please create it." ; exit 1 ; fi
  if [[ ! "$(ls -A ${DATA}/${DIRECTORY}/assemblies)" ]]; then echo "[ERROR] directory ${DATA}/${DIRECTORY}/assemblies is empty, please add some genome fasta files into it"; exit 1; fi

  ### checking if reference genome is supplied
  if [[ "${REFGENOME}" = 'N.O.R.E.F' ]]; then echo "Reference genome will be the first fasta file appearing in directory ${DIRECTORY}" ; fi
  if [[ "${REFGENOME}" != 'N.O.R.E.F' ]] && [[ ! -e "${DATA}/${DIRECTORY}/assemblies/${REFGENOME}" ]]; then echo "[ERROR] input fasta file '${DATA}/${DIRECTORY}/assemblies/${REFGENOME}' does not exist (option -g)." ; exit 1 ; fi
  if [[ "${REFGENOME}" != 'N.O.R.E.F' ]] && [[ ! -s "${DATA}/${DIRECTORY}/assemblies/${REFGENOME}" ]]; then echo "[ERROR] input fasta file '${DATA}/${DIRECTORY}/assemblies/${REFGENOME}' is empty (option -g)." ; exit 1 ; fi

  ## checking if reference genbank file is supplied (annotation)
  if [[ "${REFANNOTATION}" = 'N.O.R.E.F' ]]; then echo 'No reference genome annotation provided (genbank file)' ; fi
  if [[ "${REFANNOTATION}" != 'N.O.R.E.F' ]] && [[ ! -e "${DATA}/${DIRECTORY}/ref_gbk_annotation" ]]; then echo "[ERROR] directory containing input genbank file, '${DATA}/${DIRECTORY}/ref_gbk_annotation' does not exist." ; exit 1 ; fi
  if [[ "${REFANNOTATION}" != 'N.O.R.E.F' ]] && [[ ! -e "${DATA}/${DIRECTORY}/ref_gbk_annotation/${REFANNOTATION}" ]]; then echo "[ERROR] input genbank file '${DATA}/${DIRECTORY}/ref_gbk_annotation/${REFANNOTATION}' does not exist (option -a)." ; exit 1 ; fi
  if [[ "${REFANNOTATION}" != 'N.O.R.E.F' ]] && [[ ! -s "${DATA}/${DIRECTORY}/ref_gbk_annotation/${REFANNOTATION}" ]]; then echo "[ERROR] input genbank file '${DATA}/${DIRECTORY}/ref_gbk_annotation/${REFANNOTATION}' is empty (option -a)." ; exit 1 ; fi
  if [[ "${REFANNOTATION}" != 'N.O.R.E.F' ]] && [[ "${REFIDPATTERN}" = 'N.O.P.A.T.T.E.R.N' ]]; then 
    echo "[ERROR] prefix (only letters) of genome sequence ids found in reference fasta and genbank files REQUIRED (option -e) if reference genbank file is supplied as reference annotation (option -a). Examples : 'NC_', 'NZ_', 'AKAC'." ; exit 1 ; 
  fi

  ## checking if the step of selection of a subset of genome sequences is activated
  if [[ "${SELECTEDGENOMENB}" = '-1' ]]; then echo 'Skipping step of genome selection.' ; fi

  ## checking if filter of sequences based on their length is not activated
  if [[ $CONTIGLENGTH -eq 0 ]]; then echo 'Skipping step of filtering out sequences based on their length.' ; fi
  if [[ $N50THRESHOLD -lt 1 ]]; then echo 'Skipping step of filtering out sequences based on the genome N50 length.' ; fi
  if [[ $NBCTGTHRESHOLD -lt 0 ]]; then echo 'Skipping step of filtering out sequences based on the genome sequence number.' ; fi
  if [[ $CUTN -gt 0 ]]; then 
    echo 'We will cut scaffolds into contigs (except for the provided reference genome sequence).'; 
  elif [[ "${CUTN}" == "-1" ]]; then 
    echo 'Skipping step of cutting scaffolds into contigs.'; 
  else 
    echo '[ERROR] Bad value for option -N'; exit 1; 
  fi

  ## remove files
  if [[ $REMOVEFILES -eq 1 ]]; then
    declare -a rem_files
    rem_files=( $(ls "${DATA}/${DIRECTORY}" |grep -v 'assemblies' |grep -v 'ref_gbk_annotation') )
    for f in "${rem_files[@]}"; do
      if [[ -d "${DATA}/${DIRECTORY}/${f}" ]]; then rm -r "${DATA}/${DIRECTORY}/${f}"; fi;
    done
    echo "Existing analysis directories (diversity, proteins, genes, ecamber_input, coregenome, logs) from ${DIRECTORY} are deleted.";
  fi     
  
  if [[ $REMOVEFILES -eq 0 ]]; then echo "Existing analysis files (Diversity, Proteins, Genes or Core Genome) from ${DIRECTORY} are kept."; fi


  ## CREATE AN ARRAY TO STORE ALL ARGS AND PASSING IT TO THE DEPENDANT SCRIPTS
  declare -A ARGS_ARRAY
  ARGS_ARRAY['DIRECTORY']="${DIRECTORY}"
  ARGS_ARRAY['NAME']="${NAME}"
  ARGS_ARRAY['IDPRCT']="${IDPRCT}"
  ARGS_ARRAY['PROTLENGTHRATIO']="${PROTLENGTHRATIO}"
  ARGS_ARRAY['SYNTGENESUM']="${SYNTGENESUM}"
  ARGS_ARRAY['SYNTRADIUSSIZE']="${SYNTRADIUSSIZE}"
  ARGS_ARRAY['REFGENOME']="${REFGENOME}"
  ARGS_ARRAY['REFANNOTATION']="${REFANNOTATION}"
  ARGS_ARRAY['REFIDPATTERN']="${REFIDPATTERN}"
  ARGS_ARRAY['SELECTEDGENOMENB']="${SELECTEDGENOMENB}"
  ARGS_ARRAY['CONTIGLENGTH']="${CONTIGLENGTH}"
  ARGS_ARRAY['N50THRESHOLD']="${N50THRESHOLD}"
  ARGS_ARRAY['CUTN']="${CUTN}"
  ARGS_ARRAY['NBCTGTHRESHOLD']="${NBCTGTHRESHOLD}"
  ARGS_ARRAY['CGGENOMEPRCT']="${CGGENOMEPRCT}"
  ARGS_ARRAY['THREADS']="${THREADS}"
  ARGS_ARRAY['REMOVEFILES']="${REMOVEFILES}"
  ARGS_ARRAY['CGB_CONFIG']="${CGB_CONFIG}"

  echo "CoreGeneBuilder PARAMETERS:" 
  #echo ${ARGS_ARRAY['DIRECTORY']}


  echo "" > "${DATA}/${DIRECTORY}/progress_file.txt";


  step_no=${#STEPS}; step_id=0;

  while [[ $step_id -lt $step_no ]]
  do
    step=${STEPS:$step_id:1};
    case $step in
    D)  
      exec_step DIVERSITY "ARGS_ARRAY";
      ;;  
    A)  
      exec_step ANNOTATION "ARGS_ARRAY";
      ;;  
    C)  
      exec_step COREGENOME "ARGS_ARRAY";
      ;;  

    esac
    # let step_id++;           #returns exit code 1 if last increment
    step_id=$((${step_id} + 1));  #do not return exit code 1
  done
}

main "$@"

